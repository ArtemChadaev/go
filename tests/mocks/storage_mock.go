// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/storage/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	models "github.com/ArtemChadaev/go/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockStorageAutorization is a mock of Autorization interface.
type MockStorageAutorization struct {
	ctrl     *gomock.Controller
	recorder *MockStorageAutorizationMockRecorder
}

// MockStorageAutorizationMockRecorder is the mock recorder for MockStorageAutorization.
type MockStorageAutorizationMockRecorder struct {
	mock *MockStorageAutorization
}

// NewMockStorageAutorization creates a new mock instance.
func NewMockStorageAutorization(ctrl *gomock.Controller) *MockStorageAutorization {
	mock := &MockStorageAutorization{ctrl: ctrl}
	mock.recorder = &MockStorageAutorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageAutorization) EXPECT() *MockStorageAutorizationMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockStorageAutorization) CreateToken(refreshToken models.RefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockStorageAutorizationMockRecorder) CreateToken(refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockStorageAutorization)(nil).CreateToken), refreshToken)
}

// CreateUser mocks base method.
func (m *MockStorageAutorization) CreateUser(user models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStorageAutorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStorageAutorization)(nil).CreateUser), user)
}

// DeleteAllUserRefreshTokens mocks base method.
func (m *MockStorageAutorization) DeleteAllUserRefreshTokens(userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllUserRefreshTokens", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllUserRefreshTokens indicates an expected call of DeleteAllUserRefreshTokens.
func (mr *MockStorageAutorizationMockRecorder) DeleteAllUserRefreshTokens(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllUserRefreshTokens", reflect.TypeOf((*MockStorageAutorization)(nil).DeleteAllUserRefreshTokens), userId)
}

// DeleteRefreshToken mocks base method.
func (m *MockStorageAutorization) DeleteRefreshToken(tokenId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRefreshToken", tokenId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRefreshToken indicates an expected call of DeleteRefreshToken.
func (mr *MockStorageAutorizationMockRecorder) DeleteRefreshToken(tokenId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRefreshToken", reflect.TypeOf((*MockStorageAutorization)(nil).DeleteRefreshToken), tokenId)
}

// GetRefreshToken mocks base method.
func (m *MockStorageAutorization) GetRefreshToken(refreshToken string) (models.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshToken", refreshToken)
	ret0, _ := ret[0].(models.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshToken indicates an expected call of GetRefreshToken.
func (mr *MockStorageAutorizationMockRecorder) GetRefreshToken(refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshToken", reflect.TypeOf((*MockStorageAutorization)(nil).GetRefreshToken), refreshToken)
}

// GetRefreshTokens mocks base method.
func (m *MockStorageAutorization) GetRefreshTokens(userId int) ([]models.RefreshToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRefreshTokens", userId)
	ret0, _ := ret[0].([]models.RefreshToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRefreshTokens indicates an expected call of GetRefreshTokens.
func (mr *MockStorageAutorizationMockRecorder) GetRefreshTokens(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRefreshTokens", reflect.TypeOf((*MockStorageAutorization)(nil).GetRefreshTokens), userId)
}

// GetUser mocks base method.
func (m *MockStorageAutorization) GetUser(username, password string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", username, password)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStorageAutorizationMockRecorder) GetUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStorageAutorization)(nil).GetUser), username, password)
}

// GetUserEmailFromId mocks base method.
func (m *MockStorageAutorization) GetUserEmailFromId(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEmailFromId", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEmailFromId indicates an expected call of GetUserEmailFromId.
func (mr *MockStorageAutorizationMockRecorder) GetUserEmailFromId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEmailFromId", reflect.TypeOf((*MockStorageAutorization)(nil).GetUserEmailFromId), id)
}

// GetUserIdByRefreshToken mocks base method.
func (m *MockStorageAutorization) GetUserIdByRefreshToken(refreshToken string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIdByRefreshToken", refreshToken)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIdByRefreshToken indicates an expected call of GetUserIdByRefreshToken.
func (mr *MockStorageAutorizationMockRecorder) GetUserIdByRefreshToken(refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIdByRefreshToken", reflect.TypeOf((*MockStorageAutorization)(nil).GetUserIdByRefreshToken), refreshToken)
}

// UpdateToken mocks base method.
func (m *MockStorageAutorization) UpdateToken(oldRefreshToken string, refreshToken models.RefreshToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToken", oldRefreshToken, refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateToken indicates an expected call of UpdateToken.
func (mr *MockStorageAutorizationMockRecorder) UpdateToken(oldRefreshToken, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToken", reflect.TypeOf((*MockStorageAutorization)(nil).UpdateToken), oldRefreshToken, refreshToken)
}

// UpdateUserPassword mocks base method.
func (m *MockStorageAutorization) UpdateUserPassword(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockStorageAutorizationMockRecorder) UpdateUserPassword(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockStorageAutorization)(nil).UpdateUserPassword), user)
}

// MockStorageUserSettings is a mock of UserSettings interface.
type MockStorageUserSettings struct {
	ctrl     *gomock.Controller
	recorder *MockStorageUserSettingsMockRecorder
}

// MockStorageUserSettingsMockRecorder is the mock recorder for MockStorageUserSettings.
type MockStorageUserSettingsMockRecorder struct {
	mock *MockStorageUserSettings
}

// NewMockStorageUserSettings creates a new mock instance.
func NewMockStorageUserSettings(ctrl *gomock.Controller) *MockStorageUserSettings {
	mock := &MockStorageUserSettings{ctrl: ctrl}
	mock.recorder = &MockStorageUserSettingsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageUserSettings) EXPECT() *MockStorageUserSettingsMockRecorder {
	return m.recorder
}

// BuyPaidSubscription mocks base method.
func (m *MockStorageUserSettings) BuyPaidSubscription(userId int, time time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyPaidSubscription", userId, time)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyPaidSubscription indicates an expected call of BuyPaidSubscription.
func (mr *MockStorageUserSettingsMockRecorder) BuyPaidSubscription(userId, time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyPaidSubscription", reflect.TypeOf((*MockStorageUserSettings)(nil).BuyPaidSubscription), userId, time)
}

// CreateUserSettings mocks base method.
func (m *MockStorageUserSettings) CreateUserSettings(settings models.UserSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserSettings", settings)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserSettings indicates an expected call of CreateUserSettings.
func (mr *MockStorageUserSettingsMockRecorder) CreateUserSettings(settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserSettings", reflect.TypeOf((*MockStorageUserSettings)(nil).CreateUserSettings), settings)
}

// DeactivateExpiredSubscriptions mocks base method.
func (m *MockStorageUserSettings) DeactivateExpiredSubscriptions() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateExpiredSubscriptions")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateExpiredSubscriptions indicates an expected call of DeactivateExpiredSubscriptions.
func (mr *MockStorageUserSettingsMockRecorder) DeactivateExpiredSubscriptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateExpiredSubscriptions", reflect.TypeOf((*MockStorageUserSettings)(nil).DeactivateExpiredSubscriptions))
}

// GetUserSettings mocks base method.
func (m *MockStorageUserSettings) GetUserSettings(userId int) (models.UserSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSettings", userId)
	ret0, _ := ret[0].(models.UserSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSettings indicates an expected call of GetUserSettings.
func (mr *MockStorageUserSettingsMockRecorder) GetUserSettings(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSettings", reflect.TypeOf((*MockStorageUserSettings)(nil).GetUserSettings), userId)
}

// UpdateUserCoin mocks base method.
func (m *MockStorageUserSettings) UpdateUserCoin(userId, coin int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserCoin", userId, coin)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserCoin indicates an expected call of UpdateUserCoin.
func (mr *MockStorageUserSettingsMockRecorder) UpdateUserCoin(userId, coin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserCoin", reflect.TypeOf((*MockStorageUserSettings)(nil).UpdateUserCoin), userId, coin)
}

// UpdateUserSettings mocks base method.
func (m *MockStorageUserSettings) UpdateUserSettings(settings models.UserSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSettings", settings)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserSettings indicates an expected call of UpdateUserSettings.
func (mr *MockStorageUserSettingsMockRecorder) UpdateUserSettings(settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSettings", reflect.TypeOf((*MockStorageUserSettings)(nil).UpdateUserSettings), settings)
}
