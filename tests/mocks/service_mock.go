// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/ArtemChadaev/go/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceAutorization is a mock of Autorization interface.
type MockServiceAutorization struct {
	ctrl     *gomock.Controller
	recorder *MockServiceAutorizationMockRecorder
}

// MockServiceAutorizationMockRecorder is the mock recorder for MockServiceAutorization.
type MockServiceAutorizationMockRecorder struct {
	mock *MockServiceAutorization
}

// NewMockServiceAutorization creates a new mock instance.
func NewMockServiceAutorization(ctrl *gomock.Controller) *MockServiceAutorization {
	mock := &MockServiceAutorization{ctrl: ctrl}
	mock.recorder = &MockServiceAutorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceAutorization) EXPECT() *MockServiceAutorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockServiceAutorization) CreateUser(user models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockServiceAutorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockServiceAutorization)(nil).CreateUser), user)
}

// GenerateTokens mocks base method.
func (m *MockServiceAutorization) GenerateTokens(email, password string) (models.ResponseTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateTokens", email, password)
	ret0, _ := ret[0].(models.ResponseTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateTokens indicates an expected call of GenerateTokens.
func (mr *MockServiceAutorizationMockRecorder) GenerateTokens(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateTokens", reflect.TypeOf((*MockServiceAutorization)(nil).GenerateTokens), email, password)
}

// GetAccessToken mocks base method.
func (m *MockServiceAutorization) GetAccessToken(refreshToken string) (models.ResponseTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", refreshToken)
	ret0, _ := ret[0].(models.ResponseTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockServiceAutorizationMockRecorder) GetAccessToken(refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockServiceAutorization)(nil).GetAccessToken), refreshToken)
}

// ParseToken mocks base method.
func (m *MockServiceAutorization) ParseToken(accessToken string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", accessToken)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockServiceAutorizationMockRecorder) ParseToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockServiceAutorization)(nil).ParseToken), accessToken)
}

// UnAuthorize mocks base method.
func (m *MockServiceAutorization) UnAuthorize(refreshToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnAuthorize", refreshToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnAuthorize indicates an expected call of UnAuthorize.
func (mr *MockServiceAutorizationMockRecorder) UnAuthorize(refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnAuthorize", reflect.TypeOf((*MockServiceAutorization)(nil).UnAuthorize), refreshToken)
}

// UnAuthorizeAll mocks base method.
func (m *MockServiceAutorization) UnAuthorizeAll(email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnAuthorizeAll", email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnAuthorizeAll indicates an expected call of UnAuthorizeAll.
func (mr *MockServiceAutorizationMockRecorder) UnAuthorizeAll(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnAuthorizeAll", reflect.TypeOf((*MockServiceAutorization)(nil).UnAuthorizeAll), email, password)
}

// MockServiceUserSettings is a mock of UserSettings interface.
type MockServiceUserSettings struct {
	ctrl     *gomock.Controller
	recorder *MockServiceUserSettingsMockRecorder
}

// MockServiceUserSettingsMockRecorder is the mock recorder for MockServiceUserSettings.
type MockServiceUserSettingsMockRecorder struct {
	mock *MockServiceUserSettings
}

// NewMockServiceUserSettings creates a new mock instance.
func NewMockServiceUserSettings(ctrl *gomock.Controller) *MockServiceUserSettings {
	mock := &MockServiceUserSettings{ctrl: ctrl}
	mock.recorder = &MockServiceUserSettingsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceUserSettings) EXPECT() *MockServiceUserSettingsMockRecorder {
	return m.recorder
}

// ActivateSubscription mocks base method.
func (m *MockServiceUserSettings) ActivateSubscription(userId, daysToAdd int, paymentToken string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateSubscription", userId, daysToAdd, paymentToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateSubscription indicates an expected call of ActivateSubscription.
func (mr *MockServiceUserSettingsMockRecorder) ActivateSubscription(userId, daysToAdd, paymentToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateSubscription", reflect.TypeOf((*MockServiceUserSettings)(nil).ActivateSubscription), userId, daysToAdd, paymentToken)
}

// ChangeCoins mocks base method.
func (m *MockServiceUserSettings) ChangeCoins(userId, amount int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeCoins", userId, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeCoins indicates an expected call of ChangeCoins.
func (mr *MockServiceUserSettingsMockRecorder) ChangeCoins(userId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeCoins", reflect.TypeOf((*MockServiceUserSettings)(nil).ChangeCoins), userId, amount)
}

// CreateInitialUserSettings mocks base method.
func (m *MockServiceUserSettings) CreateInitialUserSettings(userId int, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInitialUserSettings", userId, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInitialUserSettings indicates an expected call of CreateInitialUserSettings.
func (mr *MockServiceUserSettingsMockRecorder) CreateInitialUserSettings(userId, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInitialUserSettings", reflect.TypeOf((*MockServiceUserSettings)(nil).CreateInitialUserSettings), userId, name)
}

// GetByUserID mocks base method.
func (m *MockServiceUserSettings) GetByUserID(userId int) (models.UserSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", userId)
	ret0, _ := ret[0].(models.UserSettings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockServiceUserSettingsMockRecorder) GetByUserID(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockServiceUserSettings)(nil).GetByUserID), userId)
}

// GetGrantDailyReward mocks base method.
func (m *MockServiceUserSettings) GetGrantDailyReward(userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGrantDailyReward", userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetGrantDailyReward indicates an expected call of GetGrantDailyReward.
func (mr *MockServiceUserSettingsMockRecorder) GetGrantDailyReward(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrantDailyReward", reflect.TypeOf((*MockServiceUserSettings)(nil).GetGrantDailyReward), userId)
}

// UpdateInfo mocks base method.
func (m *MockServiceUserSettings) UpdateInfo(userId int, name, icon string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInfo", userId, name, icon)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInfo indicates an expected call of UpdateInfo.
func (mr *MockServiceUserSettingsMockRecorder) UpdateInfo(userId, name, icon interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInfo", reflect.TypeOf((*MockServiceUserSettings)(nil).UpdateInfo), userId, name, icon)
}
